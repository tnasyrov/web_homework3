/*
В каждой задаче нужно оставлять короткие комментарии, которые описывают смысл вашего кода - это обязательно

Задачи:

1) Создайте функцию, которая будет вычислять объем и площадь полной поверхности куба (тоже базовая математика, иногда используется в создании анимаций). 
Эта функция принимает в себя целое число со значением длины ребра куба. 
Ответ выведите в формате строки, который изображен в примерах.
Если в функцию попал неправильный аргумент или вычислить значения невозможно - вернуть строку "При вычислении произошла ошибка"

Примеры:

calculateVolumeAndArea(5)  => 'Объем куба: 125, площадь всей поверхности: 150'
calculateVolumeAndArea(15)  => 'Объем куба: 3375, площадь всей поверхности: 1350'
calculateVolumeAndArea(15.5)  => 'При вычислении произошла ошибка'
calculateVolumeAndArea('15')  => 'При вычислении произошла ошибка'
calculateVolumeAndArea(-15)  => 'При вычислении произошла ошибка'*/

function calculateVolumeAndArea(length) {
    if (Number.isInteger(length) === false || length <= 0){
      return "При вычислении произошла ошибка"
    }
    const volume = Math.pow(length, 3)
  
    const area = Math.pow(length, 2) * 6
  
    return `Объем куба: ${volume}, Площадь полной поверхности: ${area}`;
  }
  
  console.log(calculateVolumeAndArea(5))
  console.log(calculateVolumeAndArea(15))
  console.log(calculateVolumeAndArea(15.5))
  console.log(calculateVolumeAndArea('15'))
  console.log(calculateVolumeAndArea(-15))

  /*Сначала проводим проверку введенной переменной с помощью функции isInteger, которая проверяет является ли переменная числом, также проводим проверку на значение, если оно меньше нуля или не является числом, то возвращаем сообщение об ошибке
   Если число подходит по условию, то используем функцию pow для возведения длины в степень и вычисления площади и объема*/
  
  // 2) Напишите функцию, которая будет определять номер купе по переданному ей номеру места. Функция принимает только целое число от 1 до 36.
  // Если переданный аргумент не число, отрицательное или дробное - возвращается сообщение: "Ошибка. Проверьте правильность введенного номера места"
  // Если число 0 или больше 36, то сообщение: "Таких мест в вагоне не существует"
  
  // Пример:
  // getCoupeNumber(33)  => 9
  // getCoupeNumber(7)  => 2
  // getCoupeNumber(300)  => "Таких мест в вагоне не существует"
  // getCoupeNumber(0)  => "Таких мест в вагоне не существует"
  // getCoupeNumber(7.7)  => "Ошибка. Проверьте правильность введенного номера места"
  // getCoupeNumber(-10)  => "Ошибка. Проверьте правильность введенного номера места"
  // getCoupeNumber('Hello')  => "Ошибка. Проверьте правильность введенного номера места"
  
  function getCoupeNumber(num) {
    if (Number.isInteger(num) === false || num < 0){
      return "Ошибка. Проверьте правильность введенного номера места"
    }
  
    if (num > 36 || num === 0){
      return "Таких мест в вагоне не существует"
    }
  
    const coupeNumber = Math.ceil(num / 4)
  
    return `Номер купе для места ${num}: ${coupeNumber}`
  
  }


  
  console.log(getCoupeNumber(33))
  console.log(getCoupeNumber(7))
  console.log(getCoupeNumber(300))
  console.log(getCoupeNumber(0))
  console.log(getCoupeNumber(7.7))
  console.log(getCoupeNumber(-10))
  console.log(getCoupeNumber('Hello'))

  /*Изначально проводим проверку введенной переменной (является ли числом, является ли положительным), возвращаем ошибку, если не выполняется
Если чисто больше 36 или равняется 0, то выводим, что места не существует
Вычисляем номер купе и используем функцию ceil для округления */
  
  
  
  // 3) Измените данный массив так, чтобы все числа были увеличены в 2 раза, а если попадается строка строка - то к ней было добавлено " - done".
  // Для определения типа данных используйте typeof();
  // Должно получиться: [ 10, 20, 'Shopping - done', 40, 'Homework - done' ]
  
  function arrayChanger(array){
    const array = array.map((element) => {
      if (typeof element === 'number') {
        return element * 2
      }
      if (typeof element === 'string'){
        return element += " - done"
      }
    })
    return array
  }
  
  testArray = [5, 10, 'Shopping', 20, 'Homework']
  console.log(arrayChanger(testArray))

  /*Используем функцию map, чтобы применить стрелочную функцию ко всем элементам массива и записываем новые элк
  Внутри данной функции мы проводим проверку: если элемент является числом, то умножаем на 2, если строка, то добавляем в конец необхдимую строку */
  
  
  // 4) Разверните массив data наоборот при помощи цикла и запишите данные в массив result.
  // Должно получиться: [ 'Homework', 20, 'Shopping', 10, 5 ]
  // ВАЖНО: нельзя использовать функцию reverse у массива
  
  function reverseArray(array){
    const result = []
    for (let i = array.length - 1; i >= 0; i--){
      result.push(array[i])
    }
    return result
  }
  
  testArray = [5, 10, 'Shopping', 20, 'Homework']
  console.log(reverseArray(testArray))

  /*Создаем пустой массив и исаользуем цикл for, начиная с конца передаваемого массива и добавляем элементы с помощью метода push  */ 
  
  // 5) Напишите функцию showFamily, которая будет принимать в себя массив строк и возвращать сообщение в нужном формате.
  // showFamily(family)  => 'Семья состоит из: Peter Ann Alex Linda'
  // Имена подставляются автоматически из массива. Если массив пустой, то выводится сообщение 'Семья пуста'
  
  function showFamily(familyList){
    if (familyList.length === 0){
      return 'Семья пуста'
    } else {
      const familyString = `Семья состоит из: ` + familyList.join(' ')
      return familyString
    }
  }
  
  const familyArray = ['Peter', 'Ann', 'Alex', 'Linda'];
  console.log(showFamily(familyArray))
  
/*Проверяем длину массива, если она равна 0, то выводим сообщение
В других случаях создаем строку и испольхуем метод join, который переводит массив в строку, разделяя эдементы пробелом  */

  // 6) Задания на поиск ошибок в коде
  // У вас есть объект с данными о ресторане. Начинающий разработчик создал несколько функций, которые работают неправильно и он не может понять почему. 
  // Нужно исправить функции так, чтобы они давали всегда правильный результат. Все функции и объект написаны ниже
  
      // 6.1) Функция isOpen не хочет правильно работать. Что мы уже не пробовали подставлять в неё - результат все время неправильный. 
      // Необходимо найти причины, написать причины в виде комментария и исправить их.
  
      // 6.2) Функция isAverageLunchPriceTrue должна брать цены двух любых блюд из меню, складывать их и сравнивать с средним чеком (averageLunchPrice).
      //     Сейчас функция работает, но постоянно выдает неправильный результат. 
      //     Ведь из представленного меню сумма двух любых цен всегда будет больше 20. Необходимо найти причины, написать причины в виде комментария и исправить их.
  
  // Задание 6
  const restaurantData = {
      menu: [
        {
          name: 'Salad Caesar',
          price: '14$',
        },
        {
          name: 'Pizza Diavola',
          price: '9$',
        },
        {
          name: 'Beefsteak',
          price: '17$',
        },
        {
          name: 'Napoleon',
          price: '7$',
        },
      ],
      waiters: [
        { name: 'Alice', age: 22 },
        { name: 'John', age: 24 },
      ],
      averageLunchPrice: '20$',
      openNow: true,
    }
  
    function isAverageLunchPriceTrue(fDish, sDish, average) {
      const totalDishPrice =
        +parseInt(fDish.price) + +parseInt(sDish.price); 
    
      if (totalDishPrice < parseInt(average)) {
        return 'Цена ниже средней';
      } else {
        return 'Цена выше средней';
      }
    }
    
    console.log(
      isAverageLunchPriceTrue(
        restaurantData.menu[3],
        restaurantData.menu[1],
        restaurantData.averageLunchPrice
      )
    );
    /*В данной функции average не переводилось в число и из-за этого происходило сравнения числа и строки
     Также, изменил перевод в число с помощью функции parseInt вместо slice и записал в отдельную переменную для наглядности */
    
    function isOpen(prop) {
      let answer = ''
      prop ? (answer = 'Открыто') :(answer = 'Закрыто')
      return answer
    }
  
    console.log(isOpen(restaurantData.openNow))
    /* Изначальное использование тернарного оператора неверно, условие для True должно идти превым. 
    Также, в функцию передан атрибут без указания объекта, что приводит к ошибке, так как такой переменной не существует*/
   
    
    function transferWaiters(data) {
      const copy = Object.assign({}, data)
    
      copy.waiters[0] = { name: 'Mike', age: 32 }
      return copy
    }
    
    console.log(transferWaiters(restaurantData))
  
  
  
    // *** Усложненная задача - необязательная задача, но дающая сверху 1 балл к оценке за решение
  // Это одна из классических задач в программировании на формирование самых разных фигур при помощи кода.
  // Сейчас вам необходимо написать код, который при помощи звездочек (*) в консоли нарисует вот такую фигуру:
  
  //      *
  //     ***
  //    *****
  //   *******
  //  *********
  // ***********
  
  // Количество звездочек можете задаватьь напрямую в коде или через дополнительную переменную - не столь важно.
  // (Подсказка: в конце фигуры есть перенос строки \n, который тоже учитывается в тестах. 
  //     В КОНЦЕ КАЖДОЙ СТРОКИ НЕТ ПРОБЕЛОВ, ТОЛЬКО ПЕРЕНОС - это будет проверяться)
  
  